<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nanopi架设Hexo个人博客服务器</title>
    <url>/nanopi_hexo/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文利用Nanopi NEO2架设Hexo Blog服务器，相较于github pages，本服务器拥有更快的访问速度，还具有更完备的功能扩展性；结构上主要从公网ip的获取、路由器设置、端口映射、动态域名解析、Nanopi 环境安装，定时任务创建这六个方面来阐述安装过程以及可能会遇到的问题的解决办法。<br><img src="https://s2.ax1x.com/2020/03/09/8pCYPU.jpg" alt="8pCYPU.jpg"></p>
<a id="more"></a>

<h2 id="必备条件"><a href="#必备条件" class="headerlink" title="必备条件"></a>必备条件</h2><p>1.可运行linux的开发板，我使用的是Nanopi NEO2（安装了nanopi-neo2_sd_friendlycore-xenial_4.14_arm64_20191219系统）<br>2.公网ip(如果是电信宽带，可以直接打电话给客服告诉他帮你转成公网ip)<br>3.可配置端口映射的路由器<br>4.个人域名（可自行购买，如果只想玩一下可购买１元/首年的域名）</p>
<h2 id="如何判断是否是公网ip"><a href="#如何判断是否是公网ip" class="headerlink" title="如何判断是否是公网ip"></a>如何判断是否是公网ip</h2><p>登录你的路由器，查看你的路由器ip<br><img src="https://s2.ax1x.com/2020/03/09/8pQhOP.png" alt="8pQhOP.png"><br>百度搜索<code>ip</code><br><img src="https://s2.ax1x.com/2020/03/09/8pl36I.png" alt="8pl36I.png"><br>发现这两个ip是相同的，那么恭喜你，你是公网ip，如果不是请接着往下看<br><strong>注意：</strong>确保你的路由器是一级路由器，也就说它不是从其它路由器接过来的（比如：天翼网关），也可以说它是直接拨号上网的，否则你在路由器管理界面看到的路由器ip可能会是192.168.*.*。我的路由器就是接在天翼网关下面的，这时需要将天翼网关设置成桥接模式，至于如何设置后面会说。</p>
<h2 id="如何获取公网ip，为何获取公网ip"><a href="#如何获取公网ip，为何获取公网ip" class="headerlink" title="如何获取公网ip，为何获取公网ip"></a>如何获取公网ip，为何获取公网ip</h2><p>公网ip:如果你想从外网直接访问开发板的内容，必须将你的服务器开放到公网上，因为ipv4数量有限，个人家庭中的网络基本上都是多户挂载在一个ip下通过NAT转发到各个用户，电信做的还挺人性化，打电话可以直接免费获取公网ip，但是他给你的不是一个固定ip，而是动态ip，即每次你拨号呼叫时你获得的都是不同的ip，另外每隔一定时间会自动更换你的ip。正因为这个原因，你需要动态域名解析(DNS)，我使用的是<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD</a>做免费的域名解析；当然目前还有花生壳、nat123也提供相同的功能，另外提供内网穿透功能，也就是说你可以不必拥有公网ip就可以搭建网站，并且可实现80端口的解析（三大运营商已屏蔽80端口，DNSPOD不能解析家庭网络的80端口），但是，花生壳3.0.4树莓派版本在Nanopi 上安装失败，搜索了好久，别人说不支持……又安装了2.x版本的客户端，板子上提示花生壳上线成功，域名诊断却提示花生壳未登录，利用路由器自带的花生壳也是同样的效果；关于nat123虽然说是免费解析，但是绑定自己的域名需要认证，认证需要缴费，分了<a href="http://www.nat123.com/pages_8_663.jsp?utm=smrz" target="_blank" rel="noopener">几个级别的费用</a><br><img src="https://s2.ax1x.com/2020/03/09/8pKFSI.png" alt="8pKFSI.png"><br>另外nat123客户端在我的板子上跑起来有点卡顿，开了之后关不了，所以，本着瞎折腾不花钱的原则，我选择了DNSPOD。</p>
<h2 id="天翼网关及路由器设置"><a href="#天翼网关及路由器设置" class="headerlink" title="天翼网关及路由器设置"></a>天翼网关及路由器设置</h2><p>连接上天翼网关的wifi，转到192.168.1.1路由配置界面，利用<code>超级用户名</code>和<code>超级密码</code>登录路由管理界面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名： telecomadmin</span><br><span class="line">密  码： nE7j%5m</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>一定要使用超级用户登录否则更改不了设置<br><img src="https://s2.ax1x.com/2020/03/09/8pNnW8.png" alt="8pNnW8.png"><br>点击<code>网络</code>将<code>连接名称</code>改为<code>1_INTERNET_B_VID_41</code>其它选项保持默认，点击<code>保存/应用</code>即可<br><img src="https://s2.ax1x.com/2020/03/09/8pNNWT.png" alt="8pNNWT.png"><br>进入开发板连接的路由器管理界面在<code>上网设置</code>里面将<code>工作模式</code>选择为<code>宽带PPPOE</code>，分别在<code>PPPoE账户</code>和<code>PPPoE密码</code>设置为你的<code>宽带用户名和密码</code>，点击<code>确定</code>即可。如果忘记了用户名和密码可直接拨打电信客服重置密码。<br><img src="https://s2.ax1x.com/2020/03/09/8pdnW6.png" alt="8pdnW6.png"></p>
<h2 id="配置路由端口映射"><a href="#配置路由端口映射" class="headerlink" title="配置路由端口映射"></a>配置路由端口映射</h2><p>首先给你的开发板绑定ip/mac，我使用的是电信送的360安全路由T3，登录路由器管理界面，<br>点击<code>功能扩展</code>，<code>防火墙（IP/MAC)</code><br><img src="https://s2.ax1x.com/2020/03/09/8psSY9.png" alt="8psSY9.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IP地址：填入你想分配给开发板的ip，一般就用它当前的ip就可以</span><br><span class="line">MAC地址：填入开发板mac地址</span><br><span class="line">备注：随便写</span><br><span class="line">接口：LAN</span><br></pre></td></tr></table></figure>
<p>绑定好后，进行端口映射，点击<code>功能扩展</code>，找到<code>端口映射</code><br><img src="https://s2.ax1x.com/2020/03/09/8pBnWq.png" alt="8pBnWq.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟服务名称：随便填</span><br><span class="line">内网主机ip地址：你绑定的设备的ip地址</span><br><span class="line">外部端口：选择TCP+UDP 外部访问的端口填一些不常用的端口</span><br><span class="line">内部端口：你的开发板开放的端口</span><br></pre></td></tr></table></figure>

<h2 id="Nanopi-环境配置"><a href="#Nanopi-环境配置" class="headerlink" title="Nanopi 环境配置"></a>Nanopi 环境配置</h2><p>因为我采用的是将Hexo的编译渲染环境与托管环境分开的方法，所以Nanopi 上只需要安装<code>nginx</code>,<code>php</code>即可<br>1.安装nginx  web服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<p>2.启动nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start</span><br></pre></td></tr></table></figure>
<p>nginx的www根目录默认在<code>/var/www/</code>，稍后会将hexo blog 的html文件放置于该目录下<br>3.安装php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install php7*-fpm php7*-sqlite</span><br></pre></td></tr></table></figure>
<p>4.修改nginx的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br></pre></td></tr></table></figure>
<p>找到listen行，将其前面的#号注释去掉，在路由器端口映射时，内网端口设置的是8678，listen为8678</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8678 default_server;</span><br><span class="line">        listen [::]:8678 default_server;</span><br></pre></td></tr></table></figure>

<p>找到index行，加入index.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Add index.php to the list if you are using PHP</span><br><span class="line">        index index.php index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name _;</span><br></pre></td></tr></table></figure>
<p>找到php的定义段，按如下内容修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">                #include snippets&#x2F;fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">                # With php7.0-cgi alone:</span><br><span class="line">                #fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">                # With php7.0-fpm:</span><br><span class="line">                include fastcgi_params;</span><br><span class="line">                fastcgi_index index.php;</span><br><span class="line">                fastcgi_pass unix:&#x2F;run&#x2F;php&#x2F;php7.0-fpm.sock;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>5.重新加载nginx的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx reload</span><br></pre></td></tr></table></figure>
<p>这时打开浏览器输入192.168.0.6:8678可以看到一个nginx的界面说明已经配置成功。</p>
<h2 id="在PC上安装Hexo-Blog"><a href="#在PC上安装Hexo-Blog" class="headerlink" title="在PC上安装Hexo Blog"></a>在PC上安装Hexo Blog</h2><p>这个内容已经在上一篇博客中说明过，此处不在赘述，可以参考“<a href="http://www.ontheroad.work:8888/hexo_github/">利用Hexo&amp;Github快速构建个人Blog</a>”</p>
<h2 id="动态域名解析"><a href="#动态域名解析" class="headerlink" title="动态域名解析"></a>动态域名解析</h2><p>注册并登录<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD</a>，购买域名，购买后点击<code>我的域名</code>，再点击<code>ontheroad.work(你注册的域名)</code>进入到<code>记录管理</code>界面，点击<code>添加记录</code>，按下图样子添加默认域名解析２个<br><img src="https://s2.ax1x.com/2020/03/09/89SotO.png" alt="89SotO.png"><br>再添加对自己域名的解析,<code>记录值</code>先随便填一个IP地址<br><img src="https://s2.ax1x.com/2020/03/09/89pEBq.png" alt="89pEBq.png"><br>因为我们要解析的ip是动态变化的，因此刚随便填写的<code>记录值</code>也要跟随着变化，下面在开发板上配置一个定时任务，利用别人封装好的bash，调用API，更改<code>记录值</code><br>首先在DNSPOD<code>账号中心</code>,<code>秘钥管理</code>界面创建秘钥<br><a href="https://imgchr.com/i/89iSqs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/09/89iSqs.png" alt="89iSqs.png"></a><br>创建成功后获得ID和Token，复制保存这两个信息，后面调用API需要<br>下载ArDNSPod客户端<br>建议下载到当前用户的根目录下，以方便定时任务的添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;imki911&#x2F;ArDNSPod</span><br></pre></td></tr></table></figure>
<p>将之前得到的ID和token写入dns.conf 文件, 并指定要绑定的子域名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1. Combine your token ID and token together as follows</span><br><span class="line">arToken&#x3D;&quot;你的token ID,你的token&quot;</span><br><span class="line"></span><br><span class="line"># 2. Place each domain you want to check as follows</span><br><span class="line"># you can have multiple arDdnsCheck blocks</span><br><span class="line">arDdnsCheck &quot;你的域名&quot; &quot;www&quot;</span><br></pre></td></tr></table></figure>
<p>根据情况修改<code>ddnspod.sh</code>文件中<code>IPtype</code>的值，我定义为１(WAN)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Please select IP type</span><br><span class="line">IPtype&#x3D;1  #1.WAN 2.LAN 3.IPv6</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ddnspod.sh</span><br></pre></td></tr></table></figure>
<p>这时你会看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Type: A</span><br><span class="line">OS: Linux</span><br><span class="line">Address: 117.64.253.248</span><br><span class="line">Updating Domain: www.ontheroad.work</span><br><span class="line">hostIP: 117.64.253.248</span><br><span class="line">lastIP: 114.97.203.112</span><br><span class="line">update to 117.64.253.248 successed.</span><br></pre></td></tr></table></figure>
<p>那么你的客户端部署就成功了，可以在DNSPOD控制台中看到我们随便填的<code>记录值</code>变成了自己的路由器ip。</p>
<p>至此你可以将github 上面我们上传的Hexo网页信息clone到本地的nginx根目录啦<br><strong>注意：</strong>关于如何将Hexo博客上传到github请参考上一篇文章“<a href="http://www.ontheroad.work:8888/hexo_github/">利用Hexo&amp;Github快速构建个人Blog</a>”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;var&#x2F;www&#x2F;</span><br><span class="line">$ sudo rm -rf html</span><br><span class="line">$ sudo git clone https:&#x2F;&#x2F;github.com:YourgithubName&#x2F;YourgithubName.github.io.git</span><br></pre></td></tr></table></figure>
<p>用浏览器打开192.168.0.6:8678，就可以看到自己的博客啦！</p>
<h2 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h2><p>需要创建两个定时任务<br>一个用于实时监测IP并自动更新至DNSPOD，另一个用于定时抓取github上我们更新的博客内容。</p>
<p>修改<code>ddnspod.sh</code>文件中的<code>DIR</code>变量值（这个地方我找了好久，因为cron定时任务只支持绝对路径，所以bash中的命令需要使用绝对路径）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DIR&#x3D;$(dirname -- &quot;$(readlink &quot;$0&quot;)&quot;)</span><br><span class="line">DIR&#x3D;.&#x2F;ArDNSPod　＃添加这一行</span><br></pre></td></tr></table></figure>
<p>修改完后你会发现在当前目录下运行<code>./ddnspod.sh</code>,会出现以下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Type: A</span><br><span class="line">OS: Linux</span><br><span class="line">Address: 114.97.203.119</span><br><span class="line">.&#x2F;ddnspod.sh: line 282: .&#x2F;ArDNSPod&#x2F;dns.conf: No such file or directory</span><br></pre></td></tr></table></figure>
<p>因为没有bash编程的基础，暂时也没有学习bash的打算，强制修改<code>DIR</code>变量导致的错误，可以在当前目录新建一个<code>ArDNSPod</code>把<code>dns.conf</code>复制进去就行了，这只是敷衍自己，后期有时间再做更正。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir ArDNSPod</span><br><span class="line">$ cp dns.conf .&#x2F;ArDNSPod&#x2F;</span><br></pre></td></tr></table></figure>
<p>创建定时任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>会打开当前用户的cron任务表<br>在最底下添加两个任务，第一个每隔一分钟调用<code>dnshpod.sh</code>更新域名解析<code>记录值</code>，第二个每隔30分钟从github pull你更新的博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># m h  dom mon dow   command</span><br><span class="line">*&#x2F;1 *   *   *   *   .&#x2F;ArDNSPod&#x2F;ddnspod.sh</span><br><span class="line">*&#x2F;30 *   *   *   *   cd &#x2F;var&#x2F;www&#x2F;html&#x2F; &amp;&amp; sudo git pull</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>不建议将第二个更新时间设置得太短，因为github的访问速度不快，为避免更新出错，适当调整时间。<br>重启cron使配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service cron restart</span><br></pre></td></tr></table></figure>
<p>如果时间到了，执行了你的定时任务，恭喜你，在Nanopi 上部署Hexo 博客已经圆满完成！可以通过你的<code>域名+端口号</code>来访问自己的博客啦，比如说我的博客：<a href="http://www.ontheroad.work:8888">www.ontheroad.work:8888</a></p>
<hr>
<p>如果没有执行，好吧，你最先想到的应该是查看log，但是默认情况下ubuntu 没有安装<code>rsyslog</code><br>安装rsyslog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install rsyslog</span><br></pre></td></tr></table></figure>
<p>开启cron日志功能，#将cron前面的注释符去掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;rsyslog.d&#x2F;50-default.conf</span><br></pre></td></tr></table></figure>
<p>重启rsyslog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo  service rsyslog  restart</span><br></pre></td></tr></table></figure>
<p>查看crontab日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim &#x2F;var&#x2F;log&#x2F;cron.log</span><br></pre></td></tr></table></figure>
<p>这时你可能会发现一个<code>(CRON) info (No MTA installed, discarding output)</code>的问题，这时因为没有配置邮件服务器<br>可以通过安装邮件服务器解决该问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install postfix</span><br></pre></td></tr></table></figure>
<p>重新配置邮件服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure postfix</span><br></pre></td></tr></table></figure>
<p>按提示一直ok或yes，配置完邮箱后也部署也就完成了！<br><strong>注意：</strong>记得回去关闭cron的log，在重新配置一下邮箱容量，否则随着时间的推移，log会占用大量空间。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>虽然将Hexo部署在Nanopi上，增加了更多的不稳定风险，但是通过这两天的运行能够看出，相较于部署在github上的博客，我的Nanopi表现得相当不错，尤其在下午6:00以后，对github的解析出现了无法连接的情况，我估计是地球另一边的人起来干活了吧……<br>目前一小时对github pages服务器解析监控<br><img src="https://s2.ax1x.com/2020/03/09/896ObV.png" alt="896ObV.png"><br>同时间段对Nanopi服务器解析监控<br><img src="https://s2.ax1x.com/2020/03/09/89cVUO.png" alt="89cVUO.png"><br>当然优点不仅如此，还可以在Nanopi上搭建私有云盘、物联网服务器、网络打印机等等好玩的用法。</p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      <categories>
        <category>个人Blog</category>
        <category>Nanopi</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Nanopi</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo&amp;Github快速构建个人Blog</title>
    <url>/hexo_github/</url>
    <content><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>本文将分为Hexo的安装、在github上部署、个人域名绑定三个部分介绍如何利用这两者在Ubuntu环境上搭建自己的个人博客。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>1.<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一款快速、简洁且高效的博客框架，支持Markdown编写、支持一件部署、拥有200多款主题，插件丰富可扩展，在几秒内，即可利用靓丽的主题生成静态网页。<br>2.github 众所周知一个有名的代码托管平台，github pages 是其为开发者免费提供的个人网站托管平台，只能托管静态内容。目前国内的coding代码托管平台也能够支持静态页面的托管，本次仅介绍在github上部署的过程，在coding的部署与之类似。<br>3.我的运行环境：Ubuntu 18.04.4 LTS</p>
<a id="more"></a>

<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>可以跟着我的步骤来，也可以直接参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a>（支持中文）<br>1.安装 Git ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git-core</span><br></pre></td></tr></table></figure>
<p>2.安装 Node.js：直接从<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>官网下载安装后，执行第８步安装Hexo时可能会出现<code>EACCES</code>权限错误（官方建议不要使用sudo来解决），如有错误利用<code>nvm</code>全局安装解决错误，步骤如下。没有错误可跳过3、4、5、6、7步骤。<br>3.下载nvm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:nvm-sh&#x2F;nvm.git ~&#x2F;.nvm</span><br></pre></td></tr></table></figure>
<p>4.设置淘宝registry提高下载速度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>5.~/.bashrc添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ export NVM_NODEJS_ORG_MIRROR&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node</span><br><span class="line">$ export NVM_IOJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;iojs</span><br><span class="line">$ . ~&#x2F;.nvm&#x2F;nvm.sh</span><br></pre></td></tr></table></figure>
<p>6.使配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ . ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<p>7.利用nvm安装node 和npm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvm list-remote #查看可所有版本号</span><br><span class="line">$ nvm install &lt;你需要的版本号&gt;</span><br><span class="line">$ nvm use &lt;你需要的版本号&gt;</span><br><span class="line">example:</span><br><span class="line">$ nvm list-remote</span><br><span class="line">$ nvm install v13.10.1</span><br><span class="line">$ nvm use v13.10.1</span><br></pre></td></tr></table></figure>
<p>8.安装 Hexo：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>至此Hexo的安装已经完成。</p>
<h2 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>新建完成后，指定文件夹的目录如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p><code>_config.yml</code>是网站的配置信息，等会部署到github 会修改其中参数（后面讲解），具体参数参考<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">Hexo官网</a><br>生成初始页面看看效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>在浏览器中输入<code>http://localhost:4000</code>地址就可以看到当前的博客啦</p>
<h2 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h2><p>1.首先在<a href="https://github.com/" target="_blank" rel="noopener">github官网</a>注册账号并登录，不讲了<br>2.点击<code>new</code>创建新的repository，<code>Reposotory name</code>设置为<code>&lt;你的github用户名&gt;.github.io</code>，如图所示，只要这样设置才能解析到你的github pages.<br><a href="https://imgchr.com/i/3zOL1P" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/08/3zOL1P.png" alt="3zOL1P.png"></a><br><img src="https://s2.ax1x.com/2020/03/08/3zXDjf.png" alt="3zXDjf.png"><br>3.创建好后回到命令窗口配置github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你注册的用的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你注册用的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>4.创建SSH ，一路回车直到创建完成，<code>your email</code>为你的github注册邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>5.在github你当前创建的repository中点击<code>settings</code>找到SSH keys的设置选项，点击<code>New SSH key</code><br>6.在命令窗口中cd 到<code>~/.ssh/</code>目录下将<code>id_rsa.pub</code>里面的内容复制上面方框中保存即可。<br>7.测试SSH是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>8.更改<code>_config.yml</code>文件配置网页部署信息，<code>YourgithubName</code>就是你的github用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>9.安装部署命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>10.重新编译部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>现在你的博客就部署好啦，可以通过<code>http://yourname.github.io</code>这个网址来访问自己的博客啦。</p>
<h2 id="个人域名绑定"><a href="#个人域名绑定" class="headerlink" title="个人域名绑定"></a>个人域名绑定</h2><p>如果你不喜欢这个域名，可以自己购买其他的域名来绑定你的博客，通过自己的域名及可直接访问<br>我在<a href="https://www.dnspod.cn/promo/domainscarnival?source=newDNSPod&from=Login" target="_blank" rel="noopener">DNSPOD</a>上购买的域名，赠送了免费的<a href="https://www.dnspod.cn/buy/package_details" target="_blank" rel="noopener">DNS云解析套餐</a>基本能够满足我的使用要求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">境内 4 大智能线路细分</span><br><span class="line">10 个 DNS 节点分布</span><br><span class="line">3 级子域名</span><br><span class="line">600s TTL 最低值</span><br><span class="line">2 条 URL 转发</span><br><span class="line">2 条负载均衡</span><br><span class="line">1G 攻击防护流量</span><br><span class="line">7 大主流搜索引擎优化</span><br></pre></td></tr></table></figure>
<p>建议在购买域名的时候不要只看重首年多少钱，比如说首年１元的域名，第二年续费价格会很贵，土豪不用考虑这些<br>步入正题<br>免费版需要添加两个默认的解析<br><img src="https://s2.ax1x.com/2020/03/09/8S9joT.png" alt="8S9joT.png"><br>接下来在你创建的github repository下点击<code>settings</code>往下翻，找到<code>Custom domain</code>填入你想解析的顶级域名或者二级域名，然后点击<code>save</code>保存，此时你的repository里面会新增一个CNAME文件，里面就是你刚才输入的域名<br><img src="https://s2.ax1x.com/2020/03/09/8SPkcj.png" alt="8SPkcj.png"><br>回到DNSPOD控制台，点击<code>添加记录</code>，按图中所示添加第３条记录<br><img src="https://s2.ax1x.com/2020/03/09/8SPDvd.png" alt="8SPDvd.png"><br>其中<code>记录值</code>填入你的<code>github repository名＋.github.io</code>，比如说我填写的记录值就是<code>AlwaysOnTheRoad.github.io.</code><br>至此域名绑定已经完成，等待一段时间，你就可以通过自己的域名访问自己的博客啦！<br>如果你访问出现如下的404错误，不要惊慌，这说明你已绑定成功，还要再等待一会，就可以访问啦！<br><img src="https://s2.ax1x.com/2020/03/09/8SPh8g.png" alt="8SPh8g.png"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>利用Ｈexo＆Github 够建博客很简单，只是在执行的过程中会出现很多问题，每个人的问题都不一样，自己得针对问题找答案。</li>
<li>使用中发现，有时候加载速度有点慢，可以考虑将其部署到coding上，毕竟是国内的服务器，速度应该快点，不过听说容量限制在128M以内，我也不清楚，我的解决方法是利用自己的Nanopi开发板搭建自己的服务器，将网页部署在上面，目前已架设完成，速度丝滑，下一篇文章将出详细教程。</li>
</ul>
]]></content>
      <categories>
        <category>个人Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/about/</url>
    <content><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p><strong>姓名：</strong> huadong<br><strong>邮箱：</strong><a href="mailto:914188380@qq.com">914188380@qq.com</a><br><strong>爱好：</strong>炸鸡啤酒，快乐肥宅！</p>
<p><img src="https://s2.ax1x.com/2020/03/09/8Sy6OK.jpg" alt="8Sy6OK.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
